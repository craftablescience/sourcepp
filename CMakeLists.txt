cmake_minimum_required(VERSION 3.21 FATAL_ERROR)
project(sourcepp)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)


# Options (General)
option(SOURCEPP_USE_DMXPP               "Build dmxpp library"                  ON)
option(SOURCEPP_USE_FGDPP               "Build fgdpp library"                  ON)
option(SOURCEPP_USE_KVPP                "Build kvpp library"                   ON)
option(SOURCEPP_USE_MDLPP               "Build mdlpp library"                  ON)
option(SOURCEPP_USE_VICEPP              "Build vicepp library"                 ON)
option(SOURCEPP_USE_VMFPP               "Build vmfpp library"                  ON)
option(SOURCEPP_USE_VTFPP               "Build vtfpp library"                  ON)
option(SOURCEPP_BUILD_TESTS             "Build tests for enabled libraries"   OFF)
option(SOURCEPP_USE_STATIC_MSVC_RUNTIME "Link to static MSVC runtime library" OFF)


# Options (Library)
option(FGDPP_ENABLE_SPEN_FGD_SUPPORT "Enable support for FGD alterations (https://github.com/TeamSpen210/HammerAddons/wiki/Unified-FGD) made by TeamSpen's HammerAddons. Fully backwards compatible with Valve's FGD standard." OFF)


# Set defaults
if(PROJECT_IS_TOP_LEVEL)
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
endif()

if(SOURCEPP_USE_STATIC_MSVC_RUNTIME)
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()


# bufferstream
if(NOT TARGET bufferstream)
    add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/src/thirdparty/bufferstream")
endif()


# ice
if(SOURCEPP_USE_VICEPP)
    add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/src/thirdparty/ice")
endif()


# miniz
if(SOURCEPP_USE_VTFPP AND NOT TARGET miniz)
    add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/src/thirdparty/miniz")
endif()


# stb_image
if(SOURCEPP_USE_VTFPP)
    add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/src/thirdparty/stb_image")
endif()


# Shared code
list(APPEND ${PROJECT_NAME}_SOURCES
        "${CMAKE_CURRENT_SOURCE_DIR}/include/sourcepp/buffer/Buffer.h"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/sourcepp/math/Angles.h"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/sourcepp/math/Float.h"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/sourcepp/math/Integer.h"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/sourcepp/math/Matrix.h"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/sourcepp/math/Vector.h"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/sourcepp/string/String.h"
        "${CMAKE_CURRENT_SOURCE_DIR}/src/sourcepp/buffer/Buffer.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/src/sourcepp/string/String.cpp")
add_library(${PROJECT_NAME} STATIC ${${PROJECT_NAME}_SOURCES})
target_link_libraries(${PROJECT_NAME} PUBLIC bufferstream)
target_include_directories(${PROJECT_NAME} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include")


# Tests, part 1
if(SOURCEPP_BUILD_TESTS)
    set(SOURCEPP_TEST_NAME "${PROJECT_NAME}_test")

    include(FetchContent)
    FetchContent_Declare(
            googletest
            GIT_REPOSITORY https://github.com/google/googletest.git
            GIT_TAG v1.14.0)
    FetchContent_MakeAvailable(googletest)
    enable_testing()

    set(${PROJECT_NAME}_ASSET_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/test/res/")
    configure_file("${CMAKE_CURRENT_SOURCE_DIR}/test/Helpers.h.in" "${CMAKE_CURRENT_SOURCE_DIR}/test/Helpers.h")

    list(APPEND ${SOURCEPP_TEST_NAME}_SOURCES
            "${CMAKE_CURRENT_SOURCE_DIR}/test/Helpers.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/test/Helpers.cpp")
    list(APPEND ${SOURCEPP_TEST_NAME}_DEPS gtest_main)
endif()


# Add scripts
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake_scripts")
include(AddPrettyParser)


# dmxpp
if(SOURCEPP_USE_DMXPP)
    add_pretty_parser(dmxpp SOURCES
            "${CMAKE_CURRENT_SOURCE_DIR}/include/dmxpp/structs/Value.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/include/dmxpp/dmxpp.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/dmxpp/structs/Value.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/dmxpp/dmxpp.cpp")
endif()


# fgdpp
if(SOURCEPP_USE_FGDPP)
    add_pretty_parser(fgdpp SOURCES
            "${CMAKE_CURRENT_SOURCE_DIR}/include/fgdpp/structs/EntityProperties.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/include/fgdpp/fgdpp.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/fgdpp/fgdpp.cpp")
    if(FGDPP_ENABLE_SPEN_FGD_SUPPORT)
        target_compile_definitions(fgdpp PUBLIC FGDPP_UNIFIED_FGD)
    endif()
endif()


# kvpp
if(SOURCEPP_USE_KVPP)
    add_pretty_parser(kvpp SOURCES
            "${CMAKE_CURRENT_SOURCE_DIR}/include/kvpp/kvpp.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/kvpp/kvpp.cpp")
endif()


# mdlpp
if(SOURCEPP_USE_MDLPP)
    add_pretty_parser(mdlpp SOURCES
            "${CMAKE_CURRENT_SOURCE_DIR}/include/mdlpp/structs/Generic.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/include/mdlpp/structs/MDL.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/include/mdlpp/structs/VTX.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/include/mdlpp/structs/VVD.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/include/mdlpp/mdlpp.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/mdlpp/structs/MDL.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/mdlpp/structs/VTX.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/mdlpp/structs/VVD.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/mdlpp/mdlpp.cpp")
endif()


# vicepp
if(SOURCEPP_USE_VICEPP)
    add_pretty_parser(vicepp SOURCES
            "${CMAKE_CURRENT_SOURCE_DIR}/include/vicepp/vicepp.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/vicepp/vicepp.cpp")
    target_link_libraries(vicepp PRIVATE ice)
endif()


# vmfpp
if(SOURCEPP_USE_VMFPP)
    add_pretty_parser(vmfpp SOURCES
            "${CMAKE_CURRENT_SOURCE_DIR}/include/vmfpp/structs/Node.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/include/vmfpp/vmfpp.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/vmfpp/structs/Node.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/vmfpp/vmfpp.cpp")
endif()


# vtfpp
if(SOURCEPP_USE_VTFPP)
    add_pretty_parser(vtfpp SOURCES
            "${CMAKE_CURRENT_SOURCE_DIR}/include/vtfpp/ImageConversion.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/include/vtfpp/ImageFormats.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/include/vtfpp/vtfpp.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/vtfpp/ImageConversion.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/vtfpp/vtfpp.cpp")
    target_link_libraries(vtfpp PRIVATE miniz stb_image)

    # Compressonator
    if(MSVC)
        if(SOURCEPP_USE_STATIC_MSVC_RUNTIME)
            target_link_libraries(vtfpp PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/src/thirdparty/compressonator/lib/win64/Compressonator_MT$<$<CONFIG:Debug>:d>.lib")
        else()
            target_link_libraries(vtfpp PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/src/thirdparty/compressonator/lib/win64/Compressonator_MD$<$<CONFIG:Debug>:d>.lib")
        endif()
    elseif(UNIX)
        target_link_libraries(vtfpp PRIVATE
                "${CMAKE_CURRENT_SOURCE_DIR}/src/thirdparty/compressonator/lib/linux64/libCMP_Compressonator.a"
                "${CMAKE_CURRENT_SOURCE_DIR}/src/thirdparty/compressonator/lib/linux64/libCMP_Core.a"
                "${CMAKE_CURRENT_SOURCE_DIR}/src/thirdparty/compressonator/lib/linux64/libCMP_Core_AVX.a"
                "${CMAKE_CURRENT_SOURCE_DIR}/src/thirdparty/compressonator/lib/linux64/libCMP_Core_AVX512.a"
                "${CMAKE_CURRENT_SOURCE_DIR}/src/thirdparty/compressonator/lib/linux64/libCMP_Core_SSE.a")
    else()
        message(FATAL_ERROR "Unable to link to Compressonator library!")
    endif()
    target_include_directories(vtfpp PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/src/thirdparty/compressonator/include")
endif()


# Tests, part 2
if(SOURCEPP_BUILD_TESTS)
    add_executable(${SOURCEPP_TEST_NAME} ${${SOURCEPP_TEST_NAME}_SOURCES})
    target_link_libraries(${SOURCEPP_TEST_NAME} PUBLIC ${${SOURCEPP_TEST_NAME}_DEPS})
    include(GoogleTest)
    gtest_discover_tests(${SOURCEPP_TEST_NAME})
endif()
